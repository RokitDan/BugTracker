@using BugTracker.Models
@using BugTracker.Models.Enums
@using BugTracker.Services.Interfaces
@using BugTracker.Enums
@using BugTracker.Data
@using BugTracker.Extensions
@model BugTracker.Models.ViewModels.DashboardViewModel


@inject IBTRolesService _rolesService;
@inject IBTProjectService _projectService;



@{
    ViewData["Title"] = "Dashboard";
    @* Instantiate the btUser *@
}

<h1>Dashboard</h1>
<a href="javascript:void(0);">
    @* User Info *@
    [Code: Copy from Ticket/Details]
</a>
@* Get The btUser FullName *@
<strong>[User's FullName]</strong>
<span class="text-muted" style="font-size:x-small;">
    @* Company Name *@
    <strong>[Show CompanyName]</strong>
</span>



<!-- Info Pills -->
<div class="row mt-2">
    <div class="col-lg-3 col-md-6 col-sm-6">
        <a asp-action="AllProjects" asp-controller="Projects" style="text-decoration:none">
            <div class="card text-center bg-info">
                <div>
                    <div class="p-15 text-light">
                        <h3>@Model.Projects.Where(p => p.StartDate < DateTime.Now && p.EndDate > DateTime.Now).Count()</h3>
                        <span>Active Projects</span>
                    </div>
                </div>
            </div>
        </a>
    </div>
    <div class="col-lg-3 col-md-6 col-sm-6">
        <a asp-action="AllTickets" asp-controller="Tickets" style="text-decoration:none">
            <div class="card text-center bg-secondary">
                <div>
                    <div class="p-15 text-light">

                        <h3>@Model.Tickets.Count()</h3>
                        <span>Total Tickets</span>
                    </div>
                </div>
            </div>
        </a>
    </div>
    <div class="col-lg-3 col-md-6 col-sm-6">
        <div class="card text-center bg-warning">
            <div>
                <div class="p-15 text-light">
                    <h3>@Model.Tickets.Where(t => string.IsNullOrEmpty(t.DeveloperUserId)).Count()</h3>
                    <span>Unassigned Tickets</span>
                </div>
            </div>
        </div>
    </div>
    <div class="col-lg-3 col-md-6 col-sm-6">
        <div class="card text-center bg-dark">
            <div>
                <div class="p-15 text-light">
                    <h3>
                        @(
                        Model.Projects.Count()
                        + Model.Tickets.Count()
                        + Model.Members.Count()
                        )
                    </h3>
                    <span>Total Data</span>
                </div>
            </div>
        </div>
    </div>
</div>



<div class="row mt-5">
    <div class="card col-12 col-md-6 p-2">
        <div class="card-body">
            <h5>Projects by Priority</h5>
            <p>[Google Charts]</p>
            <div id="chart3D"></div>
        </div>
    </div>
    <div class="card col-12 col-md-6 p-2 mt-0">
        <div class="card-body">
            <h5>Project Tickets Count (%)</h5>
            <p>[Google Charts]</p>
            <div id="donut"></div>
        </div>
    </div>
</div>
<div class="row mt-5">
    <div class="card col-12 col-md-6 p-2">
        <div class="card-body">
            <h5>Tickets by Priority</h5>
            <p>[Morris Charts]</p>
            <!-- Morris: Donut -->
            <div class="col-md-12">
                <div id="legend" class="donut-legend" style="font-size:x-small"></div>
            </div>
            <div class="col-md-12">
                <div class="chart chart-md" id="morrisTicketPriority"></div>
            </div>
        </div>
    </div>
    <div class="card col-12 col-md-6 p-2 mt-0">
        <div class="card-body">
            <h5>Tickets by Status</h5>
            <p>[ChartJS]</p>
            <!-- ChartJS: Pie/Doughnut -->
            <div class="col-md-12">
                <!--  Chart.js Canvas Tag -->
                <canvas id="donutChart"></canvas>
            </div>
        </div>
    </div>
</div>



<div class="row gy-2">
    <div class="cols mt-5">
        <div class="card col m-1 p-2">
            <div class="card-body" style="height:600px">
                <h5>Project: Tickets vs Developers</h5>
                <p>[amCharts]</p>
                <!-- HTML -->
                <div id="chartdiv"></div>
            </div>
        </div>
    </div>
</div>

<hr />
<div class="mt-5 ">
    <div class="row row-cols-1 row-cols-md-3">
        @* Projects Table *@
        <div class="col">

            <div class="card m-1">
                <div class="card-header">
                    <h2>Projects</h2>
                </div>
                <div class="card-body" style="height: 500px; overflow-y: scroll;">
                    <table class="table table-striped table-responsive">
                        <thead>
                            <tr>
                                <th>
                                    Project Name
                                </th>
                                <th>
                                    Due Date
                                </th>
                            </tr>
                        </thead>
                        <tbody>
                            @{
                                int companyId = User.Identity!.GetCompanyId();
                                foreach (Project project in Model.Projects)
                                {

                                    <tr>
                                        <td>
                                            <a asp-controller="Projects" asp-action="Details" asp-route-id="@project.Id">
                                                <input type="hidden" asp-for="@project.Id" />
                                                @project.Name
                                            </a>
                                        </td>
                                        <td>
                                            @project.EndDate
                                        </td>
                                    </tr>

                                }
                            }
                        </tbody>
                    </table>
                </div>

            </div>

        </div>
        @* Tickets Table *@
        <div class="col">

            <div class="card m-1">
                <div class="card-header">
                    <h2>Tickets</h2>
                </div>
                <div class="card-body" style="height: 500px; overflow-y: scroll;">
                    <table class="table table-striped table-responsive">
                        <tr>
                            <th>
                                Title
                            </th>
                            <th>
                                Priority
                            </th>
                        </tr>
                        @{
                            foreach (Ticket ticket in Model.Tickets)
                            {
                                <tr>
                                    <td>
                                        <a asp-controller="Tickets" asp-action="Details" asp-route-id="@ticket.Id">
                                            <input type="hidden" asp-for="@ticket.Id" />
                                            @ticket.Title
                                        </a>
                                    </td>
                                    <td>
                                        @ticket.TicketPriority.Name
                                    </td>
                                </tr>

                            }
                        }
                    </table>
                </div>
            </div>


        </div>

        <div class="col">
            <div>
                <div class="card m-1">
                    <div class="card-header">
                        <h2>Team</h2>
                    </div>
                    <div class="card-body" style="height: 500px; overflow-y: scroll;">
                        <table class="table table-striped table-responsive">
                            <tr>
                                <th>
                                    Name
                                </th>
                                <th>
                                    Role
                                </th>
                            </tr>
                            @{
                                foreach (BTUser member in Model.Members)
                                {
                                    <tr>
                                        <td class="col">
                                            @member.FullName
                                        </td>
                                        <td class="col">
                                            @((await _rolesService.GetUserRolesAsync(member)).FirstOrDefault())
                                        </td>
                                    </tr>

                                }
                            }
                        </table>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>





@section scripts{
    <!--  Plotly Charts  -->
    <!-- Load plotly.js into the DOM -->
    <script src='https://cdn.plot.ly/plotly-2.4.2.min.js'></script>
    <script>
        $.ajax({
            type: "POST",
            url: "/Home/PlotlyBarChart",
            data: '{}',
            contentType: "application/json; charset=utf-8",
            dataType: "json",
            success: function(result) {
                var data = result;

                var layout = { barmode: 'group' };

                Plotly.newPlot('plotlyChart', data, layout);
            },
            failure: function(result) {
                alert(result.d);
            },
            error: function(result) {
                alert(result.d);
            }
        });
    </script>
    <!-- *** Begin Chart JS Pie/Donut *** -->
    <script src="https://cdn.jsdelivr.net/npm/chart.js@3.6.0/dist/chart.min.js"></script>
    <script>

        var donutChartCanvas = $('#donutChart').get(0).getContext('2d');
        var donutData = {
            labels: [
                '@nameof(BTTicketStatuses.Development)',
                '@nameof(BTTicketStatuses.New)',
                '@nameof(BTTicketStatuses.Resolved)',
                '@nameof(BTTicketStatuses.Testing)'
            ],
            datasets: [
                {
                    data: [
        @Model.Tickets.Where(t=> t.TicketStatus.Name == nameof(BTTicketStatuses.Development)).Count(),
        @Model.Tickets.Where(t=> t.TicketStatus.Name ==nameof(BTTicketStatuses.New)).Count(),
        @Model.Tickets.Where(t=> t.TicketStatus.Name ==nameof(BTTicketStatuses.Resolved)).Count(),
        @Model.Tickets.Where(t=> t.TicketStatus.Name ==nameof(BTTicketStatuses.Testing)).Count()

                    backgroundColor: [
                        'rgba(255, 99, 132, 0.2)',
                        'rgba(54, 162, 235, 0.2)',
                        'rgba(255, 206, 86, 0.2)',
                        'rgba(75, 192, 192, 0.2)'
                    ],
                    borderColor: [
                        'rgba(255, 99, 132, 1)',
                        'rgba(54, 162, 235, 1)',
                        'rgba(255, 206, 86, 1)',
                        'rgba(75, 192, 192, 1)'
                    ]
                }
            ]
        };

        var donutOptions = {
            maintainAspectRatio: false,
            responsive: true,
        };
        //Create pie or douhnut chart
        // You can switch between pie and douhnut using the method below.
        new Chart(donutChartCanvas, {
            type: 'doughnut',
            data: donutData,
            options: donutOptions
        });
    </script>
    <!-- *** End Chart JS Donut *** -->
    @* Morris Donut Chart *@
    <script src="//cdnjs.cloudflare.com/ajax/libs/raphael/2.1.0/raphael-min.js"></script>
    <script src="//cdnjs.cloudflare.com/ajax/libs/morris.js/0.5.1/morris.min.js"></script>
    <script>

        var morrisDonutData = [{
            label: "Low",
            value: @Model.Tickets.Where(t=>t.TicketPriority.Name == nameof(BTTicketPriorities.Low)).Count()
}, {
            label: "Medium",
            value: @Model.Tickets.Where(t=>t.TicketPriority.Name == nameof(BTTicketPriorities.Medium)).Count()
}, {
            label: "High",
            value: @Model.Tickets.Where(t=>t.TicketPriority.Name == nameof(BTTicketPriorities.High)).Count()
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    }, {
            label: "Urgent",
            value: @Model.Tickets.Where(t=>t.TicketPriority.Name == nameof(BTTicketPriorities.Urgent)).Count()
}];


        /*
        Morris: Donut
        */
        if ($('#morrisTicketPriority').get(0)) {
            var donutChart = Morris.Donut({
                resize: true,
                element: 'morrisTicketPriority',
                data: morrisDonutData,
                colors: ['#0088cc', '#734ba9', '#E36159', '#ff993b']
            });

            donutChart.options.data.forEach(function(label, i) {
                var legendItem = $('<span></span>').text(label['label'] + ": " + label['value']).prepend('<span>&nbsp;</span>');
                legendItem.find('span')
                    .css('backgroundColor', donutChart.options.colors[i])
                    .css('width', '20px')
                    .css('display', 'inline-block')
                    .css('margin', '10px');
                $('#legend').append(legendItem)
            });
        };
    </script>
    <!--Google Charts-->
    <script type="text/javascript" src="https://www.google.com/jsapi"></script>

    <script type="text/javascript">
        google.load("visualization", "1", { packages: ["corechart"] });
        google.setOnLoadCallback(drawChart);
        function drawChart() {
            $.ajax({
                type: "POST",
                url: "/Home/GglProjectPriority",
                data: '{}',
                contentType: "application/json; charset=utf-8",
                dataType: "json",
                success: function(result) {
                    var data = google.visualization.arrayToDataTable(result);

                    //3D Pie
                    var options = {
                        title: 'Project Priority',
                        is3D: true,
                        chartArea: { left: 0, bottom: 15, width: '100%', height: '100%' },
                        legend: { position: 'bottom' }

                    };

                    var chart = new google.visualization.PieChart($("#chart3D")[0]);
                    chart.draw(data, options);
                },
                failure: function(rresult) {
                    alert(result.d);
                },
                error: function(result) {
                    alert(result.d);
                }
            });
        }
    </script>
    <script type="text/javascript">
        google.load("visualization", "1", { packages: ["corechart"] });
        google.setOnLoadCallback(drawChart);
        function drawChart() {
            $.ajax({
                type: "POST",
                url: "/Home/GglProjectPriority",
                data: '{}',
                contentType: "application/json; charset=utf-8",
                dataType: "json",
                success: function(result) {
                    var data = google.visualization.arrayToDataTable(result);

                    //Donut
                    var options = {
                        title: 'Company Ticket Distribution',
                        pieHole: 0.3,
                        chartArea: { left: 0, bottom: 15, width: '100%', height: '100%' },
                        legend: { position: 'bottom' }
                    };
                    var chart = new google.visualization.PieChart($("#donut")[0]);
                    chart.draw(data, options);
                },
                failure: function(rresult) {
                    alert(result.d);
                },
                error: function(result) {
                    alert(result.d);
                }
            });
        }
    </script>
    <!-- *** Begin AM Charts *** -->
    <!-- Resources -->
    <script src="https://cdn.amcharts.com/lib/4/core.js"></script>
    <script src="https://cdn.amcharts.com/lib/4/charts.js"></script>

    <!-- Chart code -->
    <script>
        $.ajax({
            type: "POST",
            url: "/Home/AmCharts",
            data: '{}',
            contentType: "application/json; charset=utf-8",
            dataType: "json",
            success: function(result) {
                am4core.ready(function() {

                    // Themes begin
                    // Themes end

                    // Create chart instance
                    var chart = am4core.create("chartdiv", am4charts.XYChart);


                    // Add data
                    chart.data = result;

                    // Create axes
                    var categoryAxis = chart.yAxes.push(new am4charts.CategoryAxis());
                    categoryAxis.dataFields.category = "project";
                    categoryAxis.numberFormatter.numberFormat = "#";
                    categoryAxis.renderer.inversed = true;
                    categoryAxis.renderer.grid.template.location = 0;
                    categoryAxis.renderer.cellStartLocation = 0.1;
                    categoryAxis.renderer.cellEndLocation = 0.9;

                    var valueAxis = chart.xAxes.push(new am4charts.ValueAxis());
                    valueAxis.renderer.opposite = true;

                    // Create series
                    function createSeries(field, name) {
                        var series = chart.series.push(new am4charts.ColumnSeries());
                        series.dataFields.valueX = field;
                        series.dataFields.categoryY = "project";
                        series.name = name;
                        series.columns.template.tooltipText = "{name}: [bold]{valueX}[/]";
                        series.columns.template.height = am4core.percent(100);
                        series.sequencedInterpolation = true;

                        var valueLabel = series.bullets.push(new am4charts.LabelBullet());
                        valueLabel.label.text = "{valueX}";
                        valueLabel.label.horizontalCenter = "left";
                        valueLabel.label.dx = 10;
                        valueLabel.label.hideOversized = false;
                        valueLabel.label.truncate = false;

                        var categoryLabel = series.bullets.push(new am4charts.LabelBullet());
                        categoryLabel.label.text = "{name}";
                        categoryLabel.label.horizontalCenter = "right";
                        categoryLabel.label.dx = -10;
                        categoryLabel.label.fill = am4core.color("#fff");
                        categoryLabel.label.hideOversized = false;
                        categoryLabel.label.truncate = false;
                    }

                    createSeries("tickets", "Tickets");
                    createSeries("developers", "Devs");

                }); // end am4core.ready()


            },
            failure: function(result) {
                alert(result.d);
            },
            error: function(result) {
                alert(result.d);
            }
        });
    </script>

    <!-- *** End AM Charts *** -->
}